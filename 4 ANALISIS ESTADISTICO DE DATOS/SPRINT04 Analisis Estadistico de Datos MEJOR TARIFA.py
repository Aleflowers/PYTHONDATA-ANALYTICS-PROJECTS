#!/usr/bin/env python
# coding: utf-8

# Hola Alejandra!
# 
# Soy **Patricio Requena** üëã. Es un placer ser el revisor de tu proyecto el d√≠a de hoy!
# 
# Revisar√© tu proyecto detenidamente con el objetivo de ayudarte a mejorar y perfeccionar tus habilidades. Durante mi revisi√≥n, identificar√© √°reas donde puedas hacer mejoras en tu c√≥digo, se√±alando espec√≠ficamente qu√© y c√≥mo podr√≠as ajustar para optimizar el rendimiento y la claridad de tu proyecto. Adem√°s, es importante para m√≠ destacar los aspectos que has manejado excepcionalmente bien. Reconocer tus fortalezas te ayudar√° a entender qu√© t√©cnicas y m√©todos est√°n funcionando a tu favor y c√≥mo puedes aplicarlos en futuras tareas. 
# 
# _**Recuerda que al final de este notebook encontrar√°s un comentario general de mi parte**_, empecemos!
# 
# Encontrar√°s mis comentarios dentro de cajas verdes, amarillas o rojas, ‚ö†Ô∏è **por favor, no muevas, modifiques o borres mis comentarios** ‚ö†Ô∏è:
# 
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si todo est√° perfecto.
# </div>
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si tu c√≥digo est√° bien pero se puede mejorar o hay alg√∫n detalle que le hace falta.
# </div>
# 
# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si de pronto hace falta algo o existe alg√∫n problema con tu c√≥digo o conclusiones.
# </div>
# 
# Puedes responderme de esta forma:
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
# </div>

# # ¬øCu√°l es la mejor tarifa?
# 
# Trabajas como analista para el operador de telecomunicaciones Megaline. La empresa ofrece a sus clientes dos tarifas de prepago, Surf y Ultimate. El departamento comercial quiere saber cu√°l de las tarifas genera m√°s ingresos para poder ajustar el presupuesto de publicidad.
# 
# Vas a realizar un an√°lisis preliminar de las tarifas basado en una selecci√≥n de clientes relativamente peque√±a. Tendr√°s los datos de 500 clientes de Megaline: qui√©nes son los clientes, de d√≥nde son, qu√© tarifa usan, as√≠ como la cantidad de llamadas que hicieron y los mensajes de texto que enviaron en 2018. Tu trabajo es analizar el comportamiento de los clientes y determinar qu√© tarifa de prepago genera m√°s ingresos.

# [Te proporcionamos algunos comentarios para orientarte mientras completas este proyecto. Pero debes asegurarte de eliminar todos los comentarios entre corchetes antes de entregar tu proyecto.]
# 
# [Antes de sumergirte en el an√°lisis de datos, explica por tu propia cuenta el prop√≥sito del proyecto y las acciones que planeas realizar.]
# 
# [Ten en cuenta que estudiar, modificar y analizar datos es un proceso iterativo. Es normal volver a los pasos anteriores y corregirlos/ampliarlos para permitir nuevos pasos.]

# ## Inicializaci√≥n

# In[1]:


# Cargar todas las librer√≠as

import pandas as pd  #libreria para estructuras
import matplotlib.pyplot as plt #librer√≠a para gr√°ficas
import seaborn as sns #construir diagrama de caja en python
import numpy as np #se usa para funciones matem√°ticas complejas




# ## Cargar datos

# In[2]:


# Carga los archivos de datos en diferentes DataFrames
#df_car_orders=pd.read_csv('/datasets/instacart_orders.csv', sep=';') 
calls = pd.read_csv('/datasets/megaline_calls.csv') #datos sobre las llamadas
internet = pd.read_csv('/datasets/megaline_internet.csv') #datos sobre internet
messages = pd.read_csv('/datasets/megaline_messages.csv') #datos sobre los SMS
plans = pd.read_csv('/datasets/megaline_plans.csv') #datos sobre las tarifas
users = pd.read_csv('/datasets/megaline_users.csv') #datos de los usuarios




# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo realizando la importaci√≥n de librer√≠as y carga de datos en celdas separadas, esto ayuda a que la lectura y seguimiento del notebook sea m√°s amigable
# </div>

# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# C√≥mo recomendaci√≥n cuando declares una variable deja un espacio a cada lado del `=` para que el c√≥digo sea m√°s f√°cil de leer
# </div>

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con el ajuste
# </div>

# ## Preparar los datos

# [Los datos para este proyecto se dividen en varias tablas. Explora cada una para tener una comprensi√≥n inicial de los datos. Si es necesario, haz las correcciones requeridas en cada tabla.]

# ## Tarifas

# In[3]:


# Imprime la informaci√≥n general/resumida sobre el DataFrame de las tarifas

plans.info()
plans.head()


# In[4]:


# Imprime una muestra de los datos para las tarifas

plans.sample()


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Cuando quieras mostrar el resultado que devuelve `.head()`, o `.sample()` no es necesario el uso de `print` ya que pierdes la capacidad del notebook de mostrar el DataFrame en formato de tabla. Te recomiendo ejecutar la l√≠nea sin print o utilizar `display()` en su lugar.
# </div>

# [Describe lo que ves y observas en la informaci√≥n general y en la muestra de datos impresa para el precio de datos anterior. ¬øHay alg√∫n problema (tipos de datos no adecuados, datos ausentes, etc.) que pudieran necesitar investigaci√≥n y cambios adicionales? ¬øC√≥mo se puede arreglar?] 
# RESPUESTA= LA BASE DE DATOS EST√Å CORRECTA, NO TIENE VALORES AUSENTES , ES LA INFORMACI√ìN DE LOS PLANES , TARIFAS Y EXTRAS QUE COBRAN EN CASO DE EXCEDERSE EN ALGUNA TARIFA. SOLO SON DOS REGISTROS TARIFAS DE SURF Y ULTIMATE.

# ## Corregir datos

# [Corrige los problemas obvios con los datos bas√°ndote en las observaciones iniciales.]

# ## Enriquecer los datos

# [Agrega factores adicionales a los datos si crees que pudieran ser √∫tiles.]

# In[5]:


# Convertir `mb_per_month_included` a gigabytes
plans['gb_per_month_included'] = plans['mb_per_month_included'] / 1024

print(plans[['plan_name', 'mb_per_month_included', 'gb_per_month_included']])


# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Te recomiendo hacer la transformaci√≥n de mb a gb de la columna mb_per_month_included ya que el resto esta en funci√≥n de GB y no de mb
# </div>

# RESPUESTA: Ya qued√≥ convertido en GB , no lo realic√© porque m√°s abajo cuando se requiri√≥ si hice la conversi√≥n para el c√°lculo. 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con el ajuste
# </div>

# ## Usuarios/as

# In[6]:


users.info()
unique_values = users['churn_date'].unique()
print(unique_values)

# Imprime una muestra de datos para usuarios
users.sample(5)
users.dtypes




# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Una vez cargues los datos al inicio no es necesario que lo vuelvas a hacer, de hecho esto puede ser contraproducente si aplicaste alg√∫n proceso antes ya que si vuelves a cargarlos eliminas todo ese proceso.
# </div>

# De acuerdo , yo creo lo realic√© por algo en especial. Quiza para probar algo en espec√≠fico .

# 

# 
# RESPUESTA: Los datos en los campos reg_date y churn date hay que convertirlo como tipo fecha y el el churn_date hay datos nulos NAN

# ### Corregir los datos

# [Corrige los problemas obvios con los datos bas√°ndote en las observaciones iniciales.]

# In[7]:


# Mostrar los tipos de datos antes de la conversi√≥n
print("Antes de la conversi√≥n:")
print(users.dtypes)

users['churn_date'] = pd.to_datetime(users['churn_date'],format='%Y/%m/%d')
#users['churn_date'] = users['churn_date'].fillna('2024-12-01') #a los NaT les puse una fecha fija futura
users['reg_date'] = pd.to_datetime(users['reg_date'],format='%Y/%m/%d')

# Mostrar los tipos de datos despu√©s de la conversi√≥n
print("\nDespu√©s de la conversi√≥n:")
print(users.dtypes)
print('***********')
unique_values = users['churn_date'].unique()
print(unique_values)
print('***********')
unique_values = users['reg_date'].unique()
#print(unique_values)



# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# En este caso no es recomendable llenar los datos de `churn_date` ya que estos valores ausentes tienen un significado el cual es que si no tiene fecha es por que el usuario a√∫n sigue manteniendo un plan, al llenar los datos estar√≠as perdiendo esa parte
# </div>

# La fecha que consider√© fu√© adelantada, pero entonces lo conveniente ser√≠a dejarla como valos Nan ?
# Hice la correcci√≥n y mis cambios de fecha los puse en comentarios.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Cuando se tiene valores ausentes que representan algo es mejor dejarlos c√≥mo NaN, por por ejemplo si quisieras revisar cuantos usuarios siguen activos lo √∫nico que tendr√≠as que hacer es buscar los usuarios con NaN en esa columna, buen trabajo con el cambio
# </div>

# ### Enriquecer los datos

# ## Llamadas

# In[8]:


# Imprime la informaci√≥n general/resumida sobre el DataFrame de las llamadas

calls.info()
print(calls.dtypes)




# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Una vez cargues los datos al inicio no es necesario que lo vuelvas a hacer, de hecho esto puede ser contraproducente si aplicaste alg√∫n proceso antes ya que si vuelves a cargarlos eliminas todo ese proceso.
# </div>

# In[9]:


# Imprime una muestra de datos para las llamadas

print(calls.sample(5))


# [Describe lo que ves y observas en la informaci√≥n general y en la muestra de datos impresa para el precio de datos anterior. ¬øHay alg√∫n problema (tipos de datos no adecuados, datos ausentes, etc.) que pudieran necesitar investigaci√≥n y cambios adicionales? ¬øC√≥mo se puede arreglar?]

# ### Corregir los datos

# [Corrige los problemas obvios con los datos bas√°ndote en las observaciones iniciales.]

# In[10]:


print("Antes de la conversi√≥n:")
print(calls.dtypes)

calls['call_date'] = pd.to_datetime(calls['call_date'],format='%Y/%m/%d')
#calls['duration'] = pd.to_timedelta(calls['duration'], unit='m') #opcional convertir duration a timedelta

#users['churn_date'] = users['churn_date'].fillna('2024-12-01') #a los NaT les puse una fecha fija futura
#users['reg_date'] = pd.to_datetime(users['reg_date'],format='%Y/%m/%d')

# Mostrar los tipos de datos despu√©s de la conversi√≥n
print("\nDespu√©s de la conversi√≥n:")
print(calls.dtypes)
print('***********')
print(calls.sample(5))
#unique_values = calls['call_date'].unique()
#print(unique_values)
print('***********')

#unique_values = users['reg_date'].unique()
#print(unique_values)


# ### Enriquecer los datos

# [Agrega factores adicionales a los datos si crees que pudieran ser √∫tiles.]

# In[11]:


# A√±adir columna 'year_month' al DataFrame 'calls'
calls['year_month'] = calls['call_date'].dt.to_period('M')

#redondear la duraci√≥n de las llamadas
calls['total_minutes'] = np.ceil(calls['duration'])

print(calls.dtypes)
print(calls.head(10))


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo extrayendo los datos y redondeando hacia arriba la columna duration! 
# </div>

# ## Mensajes

# In[12]:


# Imprime la informaci√≥n general/resumida sobre el DataFrame de los mensajes

messages.info()
print('***********')
print (messages.dtypes)


# In[13]:


# Imprime una muestra de datos para los mensajes
print(messages.sample(5))



# [Describe lo que ves y observas en la informaci√≥n general y en la muestra de datos impresa para el precio de datos anterior. ¬øHay alg√∫n problema (tipos de datos no adecuados, datos ausentes, etc.) que pudieran necesitar investigaci√≥n y cambios adicionales? ¬øC√≥mo se puede arreglar?]
# RESPUESTA: No hay valores nulos pero la fecha de los mensajes hay que convertirla a tipo date.

# ### Corregir los datos

# [Corrige los problemas obvios con los datos bas√°ndote en las observaciones iniciales.]

# In[14]:


messages['message_date'] = pd.to_datetime(messages['message_date'],format='%Y/%m/%d')
messages.info()


# ### Enriquecer los datos

# [Agrega factores adicionales a los datos si crees que pudieran ser √∫tiles.]

# In[15]:


messages['year_month'] = messages['message_date'].dt.to_period('M')

print(messages.head(5))


# ## Internet

# In[16]:


# Imprime la informaci√≥n general/resumida sobre el DataFrame de internet

internet.info()


# In[17]:


# Imprime una muestra de datos para el tr√°fico de internet

print(internet.head(10))


# [Describe lo que ves y observas en la informaci√≥n general y en la muestra de datos impresa para el precio de datos anterior. ¬øHay alg√∫n problema (tipos de datos no adecuados, datos ausentes, etc.) que pudieran necesitar investigaci√≥n y cambios adicionales? ¬øC√≥mo se puede arreglar?]
#     RESPUESTA : No hay datos nulos y el session_date hay que convertilo a tipo date.

# ### Corregir los datos

# [Corrige los problemas obvios con los datos bas√°ndote en las observaciones iniciales.]

# In[18]:


internet['session_date'] = pd.to_datetime(internet['session_date'],format='%Y/%m/%d')
internet.info()


# ### Enriquecer los datos

# [Agrega factores adicionales a los datos si crees que pudieran ser √∫tiles.]

# In[19]:


# A√±adir columna 'year_month' al DataFrame 'internet'
internet['year_month'] = internet['session_date'].dt.to_period('M')
internet['gb_used'] = internet['mb_used']/1024
print(internet.head(5))



# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo! Aqu√≠ tambi√©n podr√≠as aplicar un redondeo hacia arriba al resultado de la conversi√≥n de MB a GB
# </div>

# ## Estudiar las condiciones de las tarifas

# [Es sumamente importante entender c√≥mo funcionan las tarifas, c√≥mo se les cobra a los usuarios en funci√≥n de su plan de suscripci√≥n. As√≠ que te sugerimos imprimir la informaci√≥n de la tarifa para ver una vez m√°s sus condiciones.]

# In[20]:


# Imprime las condiciones de la tarifa y aseg√∫rate de que te quedan claras
plans.info()
print('**************')
plans.head ()



# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Recuerda que algunos m√©todos necesitan terminar con `()` para poder dar el resultado correcto, en lugar de plans.head lo correcto ser√≠a `plans.head()` y sin el print
# </div>

# De acuerdo. 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con el ajuste
# </div>

# ## Agregar datos por usuario
# 
# [Ahora que los datos est√°n limpios, agrega los datos por usuario y por periodo para que solo haya un registro por usuario y por periodo. Esto facilitar√° mucho el an√°lisis posterior.]

# In[21]:


# Calcula el n√∫mero de llamadas hechas por cada usuario al mes. Guarda el resultado.
calls_count = calls.groupby(['user_id', 'year_month']).size().reset_index(name='calls_count')

print( calls_count.head (5))


#mg_users_calls = pd.merge(users, calls, on='user_id', how='inner')
#print(mg_users_calls.head())


# In[22]:


# Calcula la cantidad de minutos usados por cada usuario al mes. Guarda el resultado.

minutes_used = calls.groupby(['user_id', 'year_month'])['total_minutes'].sum().reset_index()
print( minutes_used.head (5))



# In[23]:


# Calcula el n√∫mero de mensajes enviados por cada usuario al mes. Guarda el resultado.

messages_count = messages.groupby(['user_id', 'year_month']).size().reset_index(name='message_count')
print( messages_count.head (5))


# In[24]:


# Calcula el volumen del tr√°fico de Internet usado por cada usuario al mes. Guarda el resultado.

internet_traffic = internet.groupby(['user_id', 'year_month'])['mb_used'].sum().reset_index(name='total_mb_used')

print(internet_traffic.head(5))


# [Junta los datos agregados en un DataFrame para que haya un registro que represente lo que consumi√≥ un usuario √∫nico en un mes determinado.]

# In[25]:


# Fusiona los datos de llamadas, minutos, mensajes e Internet con base en user_id y month

# Fusionar los DataFrames resultantes en uno solo
merged_consumo = pd.merge(minutes_used, calls_count, on=['user_id', 'year_month'], how='outer')
merged_consumo = pd.merge(merged_consumo, messages_count, on=['user_id', 'year_month'], how='outer')
merged_consumo = pd.merge(merged_consumo, internet_traffic, on=['user_id', 'year_month'], how='outer')


print(merged_consumo.head(10))


# In[26]:


# A√±ade la informaci√≥n de la tarifa

# Fusionar 'users' con 'plans' en base a la columna 'plan'
users_with_plans = pd.merge(users, plans, left_on='plan', right_on='plan_name', how='left')


merged_consumo_with_plans = pd.merge(merged_consumo, users_with_plans[['user_id', 'plan', 'usd_monthly_pay', 'minutes_included', 'messages_included', 'mb_per_month_included', 'usd_per_minute', 'usd_per_message', 'usd_per_gb']], on='user_id', how='left')

#print(users_with_plans.head(5))
#print(users_with_plans.dtypes)
print("************************************")
print ( "Base de datos fusionada user_consumo_plantarifa")
print(merged_consumo_with_plans.head(5))
print(merged_consumo_with_plans.dtypes)


# [Calcula los ingresos mensuales por usuario (resta el l√≠mite del paquete gratuito del n√∫mero total de llamadas, mensajes de texto y datos; multiplica el resultado por el valor del plan de llamadas; a√±ade la tarifa mensual en funci√≥n del plan de llamadas). Nota: Dadas las condiciones del plan, ¬°esto podr√≠a no ser tan trivial como un par de l√≠neas! As√≠ que no pasa nada si dedicas algo de tiempo a ello.]

# In[27]:


# Calcula el ingreso mensual para cada usuario


# Rellenar valores NaN con 0 en las columnas relevantes
merged_consumo_with_plans['total_minutes'].fillna(0, inplace=True)
merged_consumo_with_plans['message_count'].fillna(0, inplace=True)
merged_consumo_with_plans['total_mb_used'].fillna(0, inplace=True)


# Calcular los excesos
merged_consumo_with_plans['extra_minutes'] = merged_consumo_with_plans['total_minutes'] - merged_consumo_with_plans['minutes_included']
merged_consumo_with_plans['extra_messages'] = merged_consumo_with_plans['message_count'] - merged_consumo_with_plans['messages_included']
merged_consumo_with_plans['extra_data'] = merged_consumo_with_plans['total_mb_used'] - merged_consumo_with_plans['mb_per_month_included']

print(merged_consumo_with_plans.head(5))

# Asegurar que no haya valores negativos (los valores negativos significan que el usuario no ha excedido el l√≠mite)
merged_consumo_with_plans['extra_minutes'] = merged_consumo_with_plans['extra_minutes'].where(merged_consumo_with_plans['extra_minutes'] >= 0, 0)
merged_consumo_with_plans['extra_messages'] = merged_consumo_with_plans['extra_messages'].where(merged_consumo_with_plans['extra_messages'] >= 0, 0)
merged_consumo_with_plans['extra_data'] = merged_consumo_with_plans['extra_data'].where(merged_consumo_with_plans['extra_data'] >= 0, 0)

print(merged_consumo_with_plans.head(5))

#Calcular los costos adicionales
merged_consumo_with_plans['extra_minutes_cost'] = merged_consumo_with_plans['extra_minutes'] * merged_consumo_with_plans['usd_per_minute']
merged_consumo_with_plans['extra_messages_cost'] = merged_consumo_with_plans['extra_messages'] * merged_consumo_with_plans['usd_per_message']
# Convertimos MB extras a GB y calculamos el costo
merged_consumo_with_plans['extra_data_cost'] = (merged_consumo_with_plans['extra_data'] / 1024) * merged_consumo_with_plans['usd_per_gb']
                                    
# Calcular los ingresos totales
merged_consumo_with_plans['monthly_revenue'] = (merged_consumo_with_plans['usd_monthly_pay'] + merged_consumo_with_plans['extra_minutes_cost'] + merged_consumo_with_plans['extra_messages_cost'] + merged_consumo_with_plans['extra_data_cost'] )
                                                                           

                                                                                        
print("Ingresos mensuales por usuario:")
print(merged_consumo_with_plans[['user_id', 'year_month', 'monthly_revenue']])


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con la agregaci√≥n de los datos! Recuerda que para mostrar los resultados en un Notebook lo mejor es omitir el uso de print
# </div>

# Si quiero ver la tabla en lugar del print que me sugieres aqu√≠, para visualizarla.

# ## Estudia el comportamiento de usuario

# [Calcula algunas estad√≠sticas descriptivas para los datos agregados y fusionados que nos sean √∫tiles y que muestren un panorama general captado por los datos. Dibuja gr√°ficos √∫tiles para facilitar la comprensi√≥n. Dado que la tarea principal es comparar las tarifas y decidir cu√°l es m√°s rentable, las estad√≠sticas y gr√°ficas deben calcularse por tarifa.]
# 
# [En los comentarios hallar√°s pistas relevantes para las llamadas, pero no las hay para los mensajes e Internet. Sin embargo, el principio del estudio estad√≠stico que se aplica para ellos es el mismo que para las llamadas.]

# ### Llamadas

# In[28]:


# Compara la duraci√≥n promedio de llamadas por cada plan y por cada mes. Traza un gr√°fico de barras para visualizarla.

# Calcular la duraci√≥n promedio de llamadas por plan y por mes
avg_call_duration = merged_consumo_with_plans.groupby(['plan', 'year_month'])['total_minutes'].mean().reset_index()
avg_call_duration.rename(columns={'total_minutes': 'avg_call_duration'}, inplace=True)
print("Duraci√≥n promedio de llamadas por plan y por mes:")
print(avg_call_duration.sample(5))

# Configurar el gr√°fico
plt.figure(figsize=(12, 8))
sns.barplot(data=avg_call_duration, x='year_month', y='avg_call_duration', hue='plan')

# T√≠tulo y etiquetas del gr√°fico
plt.title('Duraci√≥n Promedio de Llamadas por Plan y por Mes')
plt.xlabel('Mes')
plt.ylabel('Duraci√≥n Promedio de Llamadas (minutos)')

# Mostrar el gr√°fico
plt.legend(title='Plan')
plt.tight_layout()
plt.show()


# Respuesta: El promedio de la duraci√≥n de llamadas est√° alrededor de los 400 minutos por mes. Excepto en Enero .

# In[29]:


# Compara el n√∫mero de minutos mensuales que necesitan los usuarios de cada plan. Traza un histograma.

# Agrupar los datos por plan y usuario para obtener el n√∫mero total de minutos mensuales utilizados
monthly_minutes_by_plan = merged_consumo_with_plans.groupby(['user_id', 'plan'])['total_minutes'].sum().reset_index()

print(monthly_minutes_by_plan.sample(5))

# Configurar el gr√°fico
plt.figure(figsize=(12, 8))

# Trazar el histograma
sns.histplot(data=monthly_minutes_by_plan, x='total_minutes', hue='plan', multiple='stack', kde=False, bins=30)

# T√≠tulo y etiquetas del gr√°fico
plt.title('Distribuci√≥n de Minutos Mensuales Utilizados por Plan')
plt.xlabel('Total de Minutos Mensuales')
plt.ylabel('Frecuencia')

# Mostrar el gr√°fico
plt.legend(title='Plan')
#plt.tight_layout()
plt.show()


# [Calcula la media y la variable de la duraci√≥n de las llamadas para averiguar si los usuarios de los distintos planes se comportan de forma diferente al realizar sus llamadas.]

# In[30]:


# Calcula la media y la varianza de la duraci√≥n mensual de llamadas.

# Agrupar los datos por usuario y mes para obtener la duraci√≥n total de llamadas mensuales
monthly_call_duration = merged_consumo_with_plans.groupby(['user_id', 'year_month'])['total_minutes'].sum().reset_index()

#print(monthly_call_duration.head(5))

# Calcular la media de la duraci√≥n mensual de llamadas
mean_duration = monthly_call_duration['total_minutes'].mean()

# Calcular la varianza de la duraci√≥n mensual de llamadas
variance_duration = monthly_call_duration['total_minutes'].var()

# Mostrar los resultados
print(f"Media de la duraci√≥n mensual de llamadas: {mean_duration:.2f} minutos")
print(f"Varianza de la duraci√≥n mensual de llamadas: {variance_duration:.2f} minutos^2")


# In[31]:


# Traza un diagrama de caja para visualizar la distribuci√≥n de la duraci√≥n mensual de llamadas
# Agrupar los datos por usuario y mes para obtener la duraci√≥n total de llamadas mensuales
monthly_call_duration = merged_consumo_with_plans.groupby(['user_id', 'year_month'])['total_minutes'].sum().reset_index()

# Configurar el gr√°fico
plt.figure(figsize=(12, 8))

# Trazar el diagrama de caja
sns.boxplot(data=monthly_call_duration, x='year_month', y='total_minutes')

# T√≠tulo y etiquetas del gr√°fico
plt.title('Distribuci√≥n de la Duraci√≥n Mensual de Llamadas')
plt.xlabel('Mes')
plt.ylabel('Duraci√≥n Total de Llamadas (minutos)')

# Rotar las etiquetas del eje x para mejor legibilidad
plt.xticks(rotation=45)

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# 
# 
# RESPUESTA: Casi todo el a√±o la media se mantiene al rededor de 400 minutos en promedio la duraci√≥n de las llamadas , excepto del primer cuarto del a√±o que tiende a disminuir el consumo.

# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Lo hiciste muy bien con las visualizaciones, te recomiendo agregar tus interpretaciones de las gr√°ficas c√≥mo conclusiones debajo de cada una
# </div>

# ### Mensajes

# In[32]:


# Calcular el n√∫mero promedio de mensajes enviados por plan y por mes
avg_messages_per_plan_month = merged_consumo_with_plans.groupby(['plan', 'year_month'])['message_count'].mean().reset_index()
avg_messages_per_plan_month.rename(columns={'message_count': 'avg_message_count'}, inplace=True)

print("N√∫mero promedio de mensajes enviados por plan y por mes:")
print(avg_messages_per_plan_month.head(5))

# Configurar el gr√°fico
plt.figure(figsize=(12, 8))
sns.barplot(data=avg_messages_per_plan_month, x='year_month', y='avg_message_count', hue='plan')

# T√≠tulo y etiquetas del gr√°fico
plt.title('N√∫mero Promedio de Mensajes Enviados por Plan y por Mes')
plt.xlabel('Mes')
plt.ylabel('N√∫mero Promedio de Mensajes')

# Mostrar el gr√°fico
plt.legend(title='Plan')
plt.tight_layout()
plt.show()


# In[33]:


# Compara la cantidad de tr√°fico de Internet consumido por usuarios por plan
# Calcular el promedio de tr√°fico de Internet consumido por plan
avg_internet_usage_per_plan = merged_consumo_with_plans.groupby('plan')['total_mb_used'].mean().reset_index()
avg_internet_usage_per_plan.rename(columns={'total_mb_used': 'avg_internet_usage_mb'}, inplace=True)

print("Promedio de tr√°fico de Internet consumido por plan:")
print(avg_internet_usage_per_plan)


# In[34]:


# Configurar el gr√°fico
plt.figure(figsize=(12, 8))
sns.barplot(data=avg_internet_usage_per_plan, x='plan', y='avg_internet_usage_mb', palette='viridis')

# T√≠tulo y etiquetas del gr√°fico
plt.title('Promedio de Tr√°fico de Internet Consumido por Plan')
plt.xlabel('Plan')
plt.ylabel('Tr√°fico Promedio de Internet (MB)')

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# [Elabora las conclusiones sobre el comportamiento de los usuarios con respecto a los mensajes. ¬øSu comportamiento var√≠a en funci√≥n del plan?]
# RESPUESTA : La diferencia del consumo de los mensajes no es muy diferente entre los dos planes y por lo general los usuarios del plan m√°s econ√≥mico procuranutilizar menos de los 50 MSM , lo que me llama la atenci√≥n es que el plan m√°s caro Ultimate , incluye 1,000 mensajes y el consumo promedio 50 MSM se queda muy abajo de lo que incluye el paquete.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Lo hiciste muy bien con las visualizaciones! 
# </div>

# ### Internet

# In[35]:


df= merged_consumo_with_plans

# Calcular el promedio de tr√°fico de Internet consumido por plan y por mes
avg_internet_usage_per_plan_month = df.groupby(['plan', 'year_month'])['total_mb_used'].mean().reset_index()
avg_internet_usage_per_plan_month.rename(columns={'total_mb_used': 'avg_internet_usage_mb'}, inplace=True)

print("Promedio de tr√°fico de Internet consumido por plan y por mes:")
print(avg_internet_usage_per_plan_month.sample(5))


# In[36]:


# Configurar el gr√°fico
plt.figure(figsize=(12, 8))
sns.barplot(data=avg_internet_usage_per_plan_month, x='year_month', y='avg_internet_usage_mb', hue='plan')

# T√≠tulo y etiquetas del gr√°fico
plt.title('Promedio de Tr√°fico de Internet Consumido por Plan y por Mes')
plt.xlabel('Mes')
plt.ylabel('Tr√°fico Promedio de Internet (MB)')

# Mostrar el gr√°fico
plt.legend(title='Plan')
plt.tight_layout()
plt.show()

Los usurarios de SURF por lo general se consumen y se exceden los MB que les ofrece su plan que es de 15 GB. Y los usuarios de Ultimate no se consumen los 30GB que les correponden.
# ## Ingreso

# [Del mismo modo que has estudiado el comportamiento de los usuarios, describe estad√≠sticamente los ingresos de los planes.]

# In[37]:


# Calcular el promedio de ingresos por plan y por mes
income_per_plan_month = df.groupby(['plan', 'year_month'])['monthly_revenue'].mean().reset_index()
income_per_plan_month.rename(columns={'monthly_revenue': 'avg_income'}, inplace=True)

print("Promedio de ingresos por plan y por mes:")
print(income_per_plan_month.sample(5))


# In[38]:


# Configurar el gr√°fico
plt.figure(figsize=(14, 8))
sns.barplot(data=income_per_plan_month, x='year_month', y='avg_income', hue='plan', palette='viridis')

# T√≠tulo y etiquetas del gr√°fico
plt.title('Promedio de Ingresos por Plan y por Mes')
plt.xlabel('Mes')
plt.ylabel('Ingresos Promedio (USD)')

# Mostrar el gr√°fico
plt.legend(title='Plan')
plt.tight_layout()
plt.show()


# Los usuarios de SURF tienen m√°s variabilidad en su consumo con respecto a su PLAN, pero les conviene mantenerse en el plan de $20 usd mensuales que cambiar al de $70, ya que la mayor√≠a el consumo es menor de eso. Y los usuarios de Ultimate est√°n cautivos pagando $70 usd aunque lo que les oferta el plan no lo est√°n consumiendo al 100%

# In[39]:


print(merged_consumo_with_plans.dtypes)
print(merged_consumo_with_plans.head(5))


# In[40]:


df['total_extra_income'] = df['extra_minutes_cost'] + df['extra_messages_cost'] + df['extra_data_cost']

print("Ingresos extra totales:")
print(df[['total_extra_income', 'monthly_revenue']].head())


# In[41]:


# Estad√≠sticas descriptivas de los ingresos extra y totales
extra_income_stats = df['total_extra_income'].describe()
total_income_stats = df['monthly_revenue'].describe()

print("Estad√≠sticas descriptivas de los ingresos extra:")
print(extra_income_stats)

print("Estad√≠sticas descriptivas de los ingresos totales:")
print(total_income_stats)


# In[42]:


#Visualizaci√≥n de la contribuci√≥n de los ingresos extra

# Calcular los ingresos extra totales
df['total_extra_income'] = df['extra_minutes_cost'] + df['extra_messages_cost'] + df['extra_data_cost']

# Crear columna de ingresos base
df['base_revenue'] = df['monthly_revenue'] - df['total_extra_income']

print("Ingresos extra totales y base:")
print(df[['plan', 'year_month', 'total_extra_income', 'base_revenue', 'monthly_revenue']].head())


# Agrupar por plan y mes, y calcular promedios
avg_income_per_plan_month = df.groupby(['plan', 'year_month'])[['base_revenue', 'total_extra_income']].mean().reset_index()

print("Promedio de ingresos por plan y por mes:")
print(avg_income_per_plan_month.sample(5))

# Configurar el gr√°fico
plt.figure(figsize=(14, 8))

# Crear gr√°fico de barras apiladas
sns.barplot(data=avg_income_per_plan_month, x='year_month', y='base_revenue', hue='plan', ci=None, palette='muted')
sns.barplot(data=avg_income_per_plan_month, x='year_month', y='total_extra_income', hue='plan', ci=None, palette='viridis', alpha=0.7)

# T√≠tulo y etiquetas del gr√°fico
plt.title('Contribuci√≥n de los Ingresos Extra a los Ingresos Totales por Plan y por Mes')
plt.xlabel('Mes')
plt.ylabel('Ingresos Promedio (USD)')
plt.legend(title='Plan', bbox_to_anchor=(1.05, 1), loc='upper left')

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# Esta gr√°fica fue extra , quer√≠a saber que usuarios de que plan gastaban m√°s en extras .
# Al parecer la tarifa que d√° m√°s ingresos extras es la SURF, de $20 USD que es su plan,  en promedio han terminado pagando 30, 40 hasta 50 usd, debido a los extras que deben de pagar.
# 

# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Muy buen trabajo! Las gr√°ficas mostradas son muy claras y a√±adiste tus conclusiones a partir de ellas
# </div>

# ## Prueba las hip√≥tesis estad√≠sticas

# [Prueba la hip√≥tesis de que son diferentes los ingresos promedio procedentes de los usuarios de los planes de llamada Ultimate y Surf.]

# [Elabora las hip√≥tesis nula y alternativa, escoge la prueba estad√≠stica, determina el valor alfa.]
# 
# RESPUESTA:
# Hip√≥tesis nula H0: Los ingresos promedio de los usuarios de los planes de llamada Ultimate y Surf son iguales.
# Hip√≥tesis alternativa H1: Los ingresos promedio de los usuarios de los planes de llamada Ultimate y Surf son diferentes.
# 
# 
# 

# In[43]:


# Prueba las hip√≥tesis

from scipy import stats


# Filtrar los datos para los dos planes
ultimate = df[df['plan'] == 'ultimate']['monthly_revenue']
surf = df[df['plan'] == 'surf']['monthly_revenue']

results=stats.ttest_ind(ultimate, surf)

#Interpretar el resultado


print('valor p:',results.pvalue)

# Determinar si rechazamos la hip√≥tesis nula
alpha = 0.05



if results.pvalue < alpha:
    print("Rechazamos la hip√≥tesis nula: hay diferencias significativas en los ingresos promedio.")
else:
    print("No podemos rechazar la hip√≥tesis nula: no hay diferencias significativas en los ingresos promedio.")


#print(df.dtypes)
#print(df.head(10))



# [Prueba la hip√≥tesis de que el ingreso promedio de los usuarios del √°rea NY-NJ es diferente al de los usuarios de otras regiones.]

# [Elabora las hip√≥tesis nula y alternativa, escoge la prueba estad√≠stica, determina el valor alfa.]

# In[44]:


# Prueba las hip√≥tesis

df_consumo = merged_consumo_with_plans
df_users = users

# Seleccionar las columnas necesarias de df_users
df_users_selected = df_users[['user_id', 'city']]

# Realizar el merge utilizando el campo user_id como clave
df_merged = pd.merge(df_consumo, df_users_selected, on='user_id', how='left')

# Filtrar los datos para el √°rea NY-NJ y otras regiones
ny_nj = df_merged[df_merged['city'].str.contains('NY|NJ', na=False)]['monthly_revenue']
otras_regiones = df_merged[~df_merged['city'].str.contains('NY|NJ', na=False)]['monthly_revenue']

# Verificar la presencia de NaN y eliminarlos
ny_nj_clean = ny_nj.dropna()
otras_regiones_clean = otras_regiones.dropna()

# Realizar la prueba t para muestras independientes
results = stats.ttest_ind(ny_nj_clean, otras_regiones_clean)

# Interpretar el resultado
print('Valor p:', results.pvalue)

# Determinar si rechazamos la hip√≥tesis nula
alpha = 0.05

if results.pvalue < alpha:
    print("Rechazamos la hip√≥tesis nula: hay diferencias significativas en los ingresos promedio.")
else:
    print("No podemos rechazar la hip√≥tesis nula: no hay diferencias significativas en los ingresos promedio.")

#print(ny_nj.unique())


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Excelente! Lo hiciste muy bien aplicando el test de hip√≥tesis y agregando los mensajes a mostrarse seg√∫n si se rechaza o no deja un notebook m√°s claro para cuando alguien m√°s lo revise. Pero c√≥mo esto depende de los procesos anteriores te recomiendo revisarlos y volver a ejecutar esta secci√≥n
# </div>

# In[45]:


#print(ny_nj['city'].unique())


# ## Conclusi√≥n general
# 
# [En esta secci√≥n final, enumera tus conclusiones importantes. Aseg√∫rate de que estas abarquen todas las decisiones (suposiciones) importantes que adoptaste y que determinaron la forma elegida para procesar y analizar los datos.]

# La tarifa que m√°s conviene comercializar es la de Surf ya que genera mas ingresos extras porque se exceden del plan, su contribuci√≥n al negocio es m√°s alta.
# 
# 

# <div class="alert alert-block alert-warning">
# <b>Comentario general</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# 
# Vas por un buen camino Alejandra! Hay ciertos puntos donde hay oportunidad de mejora, te he dejado mis comentarios con algunas recomendaciones para tu pr√≥xima iteracion.
# <br>
# <br>
# Han sido pocos los puntos que he identificado pero son necesarios para que tu an√°lisis est√© completo. Pero has hecho un buen trabajo hasta este punto, te recomiendo ir describiendo un poco m√°s lo que vas interpretando al final de cada secci√≥n para que el leer el proceso de tu an√°lisis sea m√°s f√°cil de llevar.
# <br>
# Se que tendr√°s mejores resultados en tu siguiente iteraci√≥n.
# <br>
# Un saludo! ü¶æ
# </div>

# <div class="alert alert-block alert-success">
# <b>Comentario general (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo realizando los cambios Alejandra! Con esto tu proyecto queda mejor presentado y con gr√°ficas que complementar mejor tu an√°lisis. Saludos!
# </div>
