#!/usr/bin/env python
# coding: utf-8

# # ¬°Hola Alejandra! üòä
# 
# Mi nombre es **Alejandro Castellanos** y hoy tengo el placer de ser el revisor de tu proyecto.
# 
# Voy a revisar todo tu c√≥digo con detalle, buscando tanto los puntos fuertes como aquellos en los que podr√≠as mejorar. Te dejar√© comentarios a lo largo del notebook, destacando lo que has hecho bien y sugiriendo ajustes donde sea necesario. Si encuentro alg√∫n error, no te preocupes, te lo har√© saber de forma clara y te dar√© informaci√≥n √∫til para que puedas corregirlo en la pr√≥xima. Si en alg√∫n punto tienes comentarios, si√©ntete libre de dejarlos tambi√©n.
# 
# 
# Encontrar√°s mis comentarios espec√≠ficos dentro de cajas verdes, amarillas o rojas, es muy importante que no muevas, modifiques o borres mis comentarios, con el fin de tener un seguimiento adecuado de tu proceso.:
# 
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si todo est√° perfecto.
# </div>
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si tu c√≥digo est√° bien pero se puede mejorar o hay alg√∫n detalle que le hace falta.
# </div>
# 
# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si de pronto hace falta algo o existe alg√∫n problema con tu c√≥digo o conclusiones.
# </div>
# 
# Puedes responderme de esta forma:
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
# </div>
# 
# A continuaci√≥n te dejar√© un comentario general con mi valoraci√≥n del proyecto. **¬°Mi objetivo es que sigas aprendiendo y mejorando con cada paso!**

# ----

# <div class="alert alert-block alert-success">
# <b>Comentario General del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Alewjandra, completaste todas las tareas propuestas para el proyecto de manera sobresaliente, lo que te ha llevado a una aprobaci√≥n bien merecida. Demuestras un excelente manejo de las herramientas de visualizaci√≥n de datos y de las pruebas de hip√≥tesis, lo cual fortalece notablemente tu an√°lisis. Contin√∫a desarrollando estas habilidades, ya que est√°s en el camino correcto para lograr a√∫n m√°s en futuros proyectos. √âxitos en tu pr√≥ximo sprint üöÄ
# 
# </div>

# ----
# 

# In[1]:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Configurar estilo de gr√°ficos
sns.set(style="whitegrid")

# 1. Importar los archivos CSV
file_01 = '/datasets/project_sql_result_01.csv'
file_04 = '/datasets/project_sql_result_04.csv'


# Leer los datasets
df_companies = pd.read_csv(file_01)
df_neighborhoods = pd.read_csv(file_04)




# 2. EXPLORACION DE LOS DATOS
# 
# info() y describe() verifican tipos de datos, valores faltantes y estad√≠sticas descriptivas.

# In[11]:


print("Informaci√≥n general sobre los datos de empresas de taxis:")
print(df_companies.info())  

print("\nDescripci√≥n estad√≠stica de la cantidad de viajes por empresa:")
print(df_companies.describe())  

print("\nVista previa de los datos:")
print(df_companies.head())

print("\nEmpresas con la mayor cantidad de viajes:")
print(df_companies.sort_values(by='trips_amount', ascending=False).head(5))

# Revisar duplicados en los nombres de empresas
duplicated_names = df_companies['company_name'].duplicated().sum()
print(f"N√∫mero de nombres duplicados en 'company_name': {duplicated_names}")

# Revisar valores negativos en trips_amount
negative_trips = (df_companies['trips_amount'] < 0).sum()
print(f"N√∫mero de valores negativos en 'trips_amount': {negative_trips}")



# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Muy buen trabajo explorando los datos y haciendo la comprobaci√≥n de los datos duplicados.
# 
# </div>

# In[13]:


# Informaci√≥n b√°sica
print("Informaci√≥n general sobre los datos de barrios:")
print(df_neighborhoods.info())

print("\nDescripci√≥n estad√≠stica del promedio de finalizaci√≥n de viajes por barrio:")
print(df_neighborhoods.describe())

print("\nVista previa de los datos:")
print(df_neighborhoods.head())

# Verificar duplicados
duplicated_locations = df_neighborhoods['dropoff_location_name'].duplicated().sum()
print(f"\nNombres duplicados en 'dropoff_location_name': {duplicated_locations}")

# Verificar valores extremos
print("\nBarrios con valores extremadamente altos en 'average_trips':")
print(df_neighborhoods[df_neighborhoods['average_trips'] > (df_neighborhoods['average_trips'].mean() + 3 * df_neighborhoods['average_trips'].std())])

print("\nBarrios con valores extremadamente bajos en 'average_trips':")
print(df_neighborhoods[df_neighborhoods['average_trips'] < (df_neighborhoods['average_trips'].mean() - 3 * df_neighborhoods['average_trips'].std())])

print("\nBarrios con el mayor promedio de finalizaci√≥n de viajes:")
print(df_neighborhoods.sort_values(by='average_trips', ascending=False).head(10))


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Excelente an√°lisis exploratorio de datos, esto permite tener una visi√≥n preliminar de la informaci√≥n con la que estamos trabajando.
# </div>

# 4.IDENTIFICAR LOS 10 PRINCIPALES BARRIOS EN T√âRMINOS DE FINALIZACION 
# ( se muestran los lugares de finalizaci√≥n con m√°s viajes promedio)

# In[28]:


top_10_neighborhoods = df_neighborhoods.sort_values(by='average_trips', ascending=False).head(10)
print(top_10_neighborhoods)

top_10_companies = df_companies.sort_values(by='trips_amount', ascending=False).head(10)
print(top_10_companies)


# HACER GR√ÅFICOS: empresas de taxis y n√∫mero de viajes, los 10 barrios principales por n√∫mero de finalizaciones

# In[25]:


# (a) Empresas de taxis y n√∫mero de viajes
top_10_companies = df_companies.sort_values(by='trips_amount', ascending=False).head(10)

plt.figure(figsize=(10, 6))
sns.barplot(data=top_10_companies, x='trips_amount', y='company_name', palette="viridis", orient='h')
plt.title('Top 10 Empresas de taxis por n√∫mero de viajes (15-16 Nov 2017)', fontsize=16)
plt.xlabel('N√∫mero de viajes', fontsize=12)
plt.ylabel('Empresa de taxis', fontsize=12)
plt.tight_layout()
plt.show()


# Este gr√°fico permitir√° identificar visualmente cu√°l es la empresa con m√°s viajes y cu√°ntos viajes hicieron las siguientes empresas, comparando las diferencias entre ellas de manera clara.
# La empresa Flash Cab tiene la mayor cantidad de viajes, con 19,558 viajes, lo que sugiere que es una de las principales empresas en la flota de taxis en Chicago durante los d√≠as seleccionados.
# Posteriormente a los resultados hay que analizar la empresa Flash Cab cu√°l es la raz√≥n por la cual est√° lidereando el mercado para poder mejorar la propia compa√±ia de taxis. 

# # (b) Los 10 barrios principales por finalizaci√≥n de viajes

# In[26]:


plt.figure(figsize=(10, 6))
sns.barplot(data=top_10_neighborhoods, x='average_trips', y='dropoff_location_name', palette="coolwarm")
plt.title('Top 10 Barrios por Promedio de Finalizaci√≥n de Viajes (Nov 2017)', fontsize=16)
plt.xlabel('Promedio de viajes', fontsize=12)
plt.ylabel('Barrio', fontsize=12)
plt.tight_layout()
plt.show()


# Las empresas de taxis podr√≠an orientar sus recursos y flotas hacia las zonas con m√°s alta demanda, como Loop, River North, y Streeterville, donde el n√∫mero de viajes es significativamente mayor.
# Tambi√©n podr√≠an investigar las necesidades de transporte en las √°reas con menor actividad, como Museum Campus o Gold Coast, para optimizar la cobertura de estos barrios y equilibrar la distribuci√≥n de viajes.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Perfecto has encontrado la informaci√≥n correctra sobre el top 10 de empresas y barrios. Muy buen uso de los recursos gr√°ficos, y tambi√©n est√° muy bien incluir tus comentarios, los cuales son completamente pertinentes
# 
# </div>

# Paso 5. Prueba de hip√≥tesis (Python)

# In[ ]:





# In[49]:


import pandas as pd
import scipy.stats as stats

# Cargar el archivo CSV
df = pd.read_csv('/datasets/project_sql_result_07.csv')

# Asegurarse de que las columnas tienen el formato correcto
df['start_ts'] = pd.to_datetime(df['start_ts'])

# Filtrar los datos solo para los s√°bados
df['day_of_week'] = df['start_ts'].dt.dayofweek
df_saturdays = df[df['day_of_week'] == 5]  # 5 corresponde al s√°bado

# Clasificar los viajes seg√∫n el clima: "bad" para condiciones desfavorables
df_saturdays['is_bad_weather'] = df_saturdays['weather_conditions'].str.lower() == 'bad'


# Crear dos grupos: s√°bados con clima desfavorable ("bad") y favorable ("good")
bad_weather_saturdays = df_saturdays[df_saturdays['is_bad_weather'] == True]
good_weather_saturdays = df_saturdays[df_saturdays['is_bad_weather'] == False]

# Asegurarse de que hay suficientes datos en ambos grupos
print(f"S√°bados con clima desfavorable: {len(bad_weather_saturdays)}")
print(f"S√°bados con clima favorable: {len(good_weather_saturdays)}")


# Realizar la prueba t para comparar las duraciones promedio
t_stat, p_value = stats.ttest_ind(
    bad_weather_saturdays['duration_seconds'], 
    good_weather_saturdays['duration_seconds'], 
    equal_var=False  # Asumimos que las varianzas pueden ser diferentes
)

# Imprimir los resultados
print(f'Estad√≠stico t: {t_stat}')
print(f'Valor p: {p_value}')

# Comparar el valor p con el nivel de significaci√≥n (alfa)
alpha = 0.05
if p_value < alpha:
    print("Rechazamos la hip√≥tesis nula: La duraci√≥n promedio de los viajes cambia los s√°bados con clima desfavorable.")
else:
    print("No rechazamos la hip√≥tesis nula: No hay suficiente evidencia para afirmar que la duraci√≥n promedio de los viajes cambia los s√°bados con clima desfavorable.")

    
    


# Hip√≥tesis Nula (H‚ÇÄ): La duraci√≥n promedio de los viajes no cambia entre los s√°bados con clima desfavorable y los s√°bados con clima favorable.
# Hip√≥tesis Alternativa (H‚ÇÅ): La duraci√≥n promedio de los viajes s√≠ cambia entre los s√°bados con clima desfavorable y favorable.
# 
# Estad√≠stico t = 7.19
# Valor p = 
# 6.73√ó10‚àí12
# 6.73√ó10‚àí12 (muy peque√±o)
# Ya que el valor p es mucho menor que el nivel de significaci√≥n de 0.05 (ùëù<0.05), rechazamos la hip√≥tesis nula. Esto significa que la duraci√≥n promedio de los viajes cambia en funci√≥n de si el clima es desfavorable o favorable.
# 

# El resultado del c√≥digo indica que existe una diferencia estad√≠sticamente significativa entre las duraciones promedio de los viajes realizados los s√°bados con clima desfavorable y aquellos con clima favorable.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Alejandra excelente forma de aplicar las condiciones para crear subconjuntos de datos. Asimismo, la metodolog√≠a que empleaste para hacer la prueba de hip√≥tesis fue perfecta. Felicitaciones.
#  
# 
# </div>
