#!/usr/bin/env python
# coding: utf-8

# # Hola &#x1F600;,
# 
# Soy **Hesus Garcia** ‚Äì **"Soy el √∫nico Hesus que conoces (y probablemente conocer√°s) üåü"** ‚Äì S√≠, como "Jes√∫s", pero con una H que me hace √∫nico. Puede sonar raro, pero cr√©eme, ¬°no lo olvidar√°s! Como tu revisor en Triple-Ten, estoy aqu√≠ para guiarte y ayudarte a mejorar tu c√≥digo. Si algo necesita un ajuste, no hay de qu√© preocuparse; ¬°aqu√≠ estoy para hacer que tu trabajo brille con todo su potencial! ‚ú®
# 
# Cada vez que encuentre un detalle importante en tu c√≥digo, te lo se√±alar√© para que puedas corregirlo y as√≠ te prepares para un ambiente de trabajo real, donde el l√≠der de tu equipo actuar√≠a de manera similar. Si en alg√∫n momento no logras solucionar el problema, te dar√© m√°s detalles para ayudarte en nuestra pr√≥xima oportunidad de revisi√≥n.
# 
# Es importante que cuando encuentres un comentario, **no los muevas, no los modifiques, ni los borres**.
# 
# ---
# 
# ### Formato de Comentarios
# 
# Revisar√© cuidadosamente cada implementaci√≥n en tu notebook para asegurar que cumpla con los requisitos y te dar√© comentarios de acuerdo al siguiente formato:
# 
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a><br>
#     
# <b>√âxito</b> - ¬°Excelente trabajo! Esta parte est√° bien implementada y contribuye significativamente al an√°lisis de datos o al proyecto. Contin√∫a aplicando estas buenas pr√°cticas en futuras secciones.
#     
# </div>
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class="tocSkip"></a><br>
#     
# <b>Atenci√≥n</b> ‚ö†Ô∏è - Este c√≥digo est√° correcto, pero se puede optimizar. Considera implementar mejoras para que sea m√°s eficiente y f√°cil de leer. Esto fortalecer√° la calidad de tu proyecto.
#     
# </div>
# 
# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor</b> <a class="tocSkip"></a><br>
#     
# <b>A resolver</b> ‚ùó - Aqu√≠ hay un problema o error en el c√≥digo que es necesario corregir para aprobar esta secci√≥n. Por favor, revisa y corrige este punto, ya que es fundamental para la validez del an√°lisis y la precisi√≥n de los resultados.
#     
# </div>
# 
# ---
# 
# Al final de cada revisi√≥n, recibir√°s un **Comentario General del Revisor** que incluir√°:
# 
# - **Aspectos positivos:** Un resumen de los puntos fuertes de tu proyecto.
# - **√Åreas de mejora:** Sugerencias sobre aspectos donde puedes mejorar.
# - **Temas adicionales para investigar:** Ideas de temas opcionales que puedes explorar por tu cuenta para desarrollar a√∫n m√°s tus habilidades.
# 
# Estos temas adicionales no son obligatorios en esta etapa, pero pueden serte √∫tiles para profundizar en el futuro.
# 
# ---
# 
# 
# Esta estructura en vi√±etas facilita la lectura y comprensi√≥n de cada parte del comentario final.
# 
# Tambi√©n puedes responderme de la siguiente manera si tienes alguna duda o quieres aclarar algo espec√≠fico:
# 
# 
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class="tocSkip"></a>
#     
# Aqu√≠ puedes escribir tu respuesta o pregunta sobre el comentario.
#     
# </div>
# 
# 
# **¬°Empecemos!** &#x1F680;
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 

# # An√°lisis del Gimnasio Model Fitness para retener a sus cliente y reducir la tasa de abandono ( churn ).

# ## Descargar los datos

# In[52]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns




# In[53]:


#descargando la base de datos
df = pd.read_csv('/datasets/gym_churn_us.csv')

df.head ()
df.info ()


# In[54]:


#revisar los valores nulos

print(df.duplicated().sum())




# ## Analisis Exploratorio de Datos EDA

# In[55]:


#Estad√≠sticas descriptivas
df.describe()


# In[56]:


#Agrupalos datos en funci√≥n de la cancelaci√≥n:
df.groupby('Churn').mean()


# Factores que parecen reducir la cancelaci√≥n:
#     Vivir cerca del gimnasio.
#     Tener amigos o colegas inscritos.
#     Tener contratos m√°s largos.
#     Participar en visitas grupales.
#     Invertir m√°s en el gimnasio.
#     Asistir con regularidad a clases.
#     
# Factores de riesgo de cancelaci√≥n:
#     Contratos cortos.
#     Baja asistencia a clases, especialmente en el √∫ltimo mes.
#     Edad m√°s joven.
#     No participar en visitas grupales.
# 

# In[57]:


#Histogramas
df.hist(figsize=(12, 10), bins=20)
plt.show()


# Los datos indican que los clientes con contratos cortos, baja frecuencia de clases y menor antig√ºedad tienen mayor riesgo de cancelaci√≥n.
# Las visitas grupales y las promociones con amigos son poco utilizadas, pero podr√≠an tener un impacto positivo en la retenci√≥n.
# La mayor√≠a de los clientes son j√≥venes (~29 a√±os) y gastan poco en servicios adicionales.

# In[58]:


#Distribuci√≥n de variables seg√∫n cancelaci√≥n
plt.figure(figsize=(8, 2))
for column in df.drop(columns=['Churn']).columns:
    sns.kdeplot(df[df['Churn'] == 0][column], label="No Cancel√≥", shade=True)
    sns.kdeplot(df[df['Churn'] == 1][column], label="Cancel√≥", shade=True)
    plt.title(column)
    plt.legend()
    plt.show()


# In[59]:


#Matriz de correlaci√≥n
plt.figure(figsize=(8, 4))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Matriz de correlaci√≥n")
plt.show()


# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class="tocSkip"></a><br>
# 
# <b>Atenci√≥n</b> ‚ö†Ô∏è - La matriz de correlaci√≥n es una herramienta √∫til para analizar relaciones entre variables num√©ricas, pero hay algunos aspectos que pueden mejorarse o aclararse en esta implementaci√≥n.
# 
# ### **Observaciones y puntos de mejora:**
# ‚úîÔ∏è **Uso adecuado de la matriz de correlaci√≥n**: Se han incluido variables clave y la escala de colores facilita la identificaci√≥n de relaciones.  
# ‚úîÔ∏è **Correlaciones relevantes con `Churn`**: Se observa que `Contract_period`, `Lifetime`, y `Avg_class_frequency_current_month` tienen correlaciones m√°s significativas con `Churn`, lo cual es un hallazgo valioso.  
# 
# ### **Puntos a mejorar o aclarar:**
# 1Ô∏è‚É£ **Confusi√≥n entre variables continuas y categ√≥ricas**  
#    - Algunas variables en la matriz de correlaci√≥n, como `gender`, `Near_Location`, y `Phone`, parecen ser categ√≥ricas en su naturaleza.  
#    - El coeficiente de correlaci√≥n de Pearson (que es lo que se usa en `df.corr()`) **es adecuado solo para variables continuas**.  
#    - Para analizar relaciones entre variables categ√≥ricas y `Churn`, podr√≠as utilizar **Chi-cuadrado** o **ANOVA** en lugar de correlaci√≥n de Pearson.  
# 
#    **Sugerencia:**  
#    - Si `gender` es binaria (0/1), su relaci√≥n con `Churn` podr√≠a evaluarse mejor con una tabla de contingencia y una prueba de independencia:  
#      ```python
#      from scipy.stats import chi2_contingency
#      contingency_table = pd.crosstab(df['gender'], df['Churn'])
#      chi2, p, dof, expected = chi2_contingency(contingency_table)
#      print(f"Chi-cuadrado: {chi2}, p-valor: {p}")
#      ```
#    - Para analizar variables categ√≥ricas ordinales, una prueba de **Kruskal-Wallis** podr√≠a ser m√°s apropiada.
# 
# 2Ô∏è‚É£ **¬øEs correcta la interpretaci√≥n de las correlaciones?**  
#    - La correlaci√≥n indica **relaci√≥n lineal** entre variables, pero no implica causalidad.  
#    - Valores como `Contract_period (-0.39)` o `Avg_class_frequency_current_month (-0.41)` tienen correlaciones negativas con `Churn`, lo que sugiere que a mayor duraci√≥n del contrato o frecuencia de asistencia, menor es la probabilidad de cancelaci√≥n.  
#    - Sin embargo, hay valores muy bajos en variables categ√≥ricas, lo que podr√≠a ser un indicativo de que la correlaci√≥n de Pearson no es la mejor m√©trica para ellas.
# 
# 3Ô∏è‚É£ **Evaluar con otras m√©tricas m√°s apropiadas**  
#    - Para evaluar la importancia de las caracter√≠sticas en relaci√≥n con `Churn`, puedes utilizar:  
#      - **√Årboles de decisi√≥n o Random Forest** para ver la importancia de las variables en la predicci√≥n.  
#      - **Coeficientes de regresi√≥n log√≠stica**, que tambi√©n ayudan a entender la contribuci√≥n de cada variable en la probabilidad de cancelaci√≥n.
# 
# 
# ### **Conclusi√≥n**  
# üìå **La matriz de correlaci√≥n es √∫til, pero debe interpretarse con precauci√≥n**. Algunas variables categ√≥ricas pueden no ser adecuadas para este an√°lisis y es mejor evaluarlas con pruebas espec√≠ficas como Chi-cuadrado o Kruskal-Wallis. Adem√°s, para analizar la importancia de las variables en la predicci√≥n de `Churn`, puede ser m√°s √∫til utilizar modelos como √°rboles de decisi√≥n o regresi√≥n log√≠stica.  
# 
# </div>

# Conclusi√≥n: 
# Las variables m√°s influyentes en el Churn parecen ser Age, Lifetime, Contract_period, y Month_to_end_contract. 
# La cancelaci√≥n est√° fuertemente ligada a la duraci√≥n del contrato, el tiempo de permanencia en el gimnasio y la frecuencia de visitas.

# ##  Construir un modelo para predecir la cancelaci√≥n de usuarios

# In[60]:


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score


# Separar caracter√≠sticas y variable objetivo
X = df.drop(columns=['Churn'])  # Caracter√≠sticas
y = df['Churn']  # Variable objetivo

# Dividir en conjuntos de entrenamiento y validaci√≥n
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

# Estandarizar las caracter√≠sticas
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_valid_scaled = scaler.transform(X_valid)

# Entrenar modelo de regresi√≥n log√≠stica
log_reg = LogisticRegression(random_state=42)
log_reg.fit(X_train_scaled, y_train)
y_pred_log = log_reg.predict(X_valid_scaled)

# Entrenar modelo de bosque aleatorio
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_valid)

# Evaluaci√≥n de los modelos
def evaluate_model(y_true, y_pred, model_name):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred)
    recall = recall_score(y_true, y_pred)
    print(f"{model_name} - Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}")

print("Evaluaci√≥n de modelos:")
evaluate_model(y_valid, y_pred_log, "Regresi√≥n Log√≠stica")
evaluate_model(y_valid, y_pred_rf, "Bosque Aleatorio")


# La Regresi√≥n Log√≠stica es el mejor modelo en este caso porque tiene:
# Mayor accuracy (clasifica correctamente m√°s casos en general).
# Mayor precision (sus predicciones de cancelaci√≥n son m√°s confiables).
# El mismo recall que el Bosque Aleatorio.

# ## Crear cl√∫steres de usuarios/as

# In[61]:


from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
# Eliminar la columna de cancelaci√≥n
df_features = df.drop(columns=['Churn'])

# Estandarizar los datos
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_features)

# Crear el dendrograma
plt.figure(figsize=(12, 5))
linked = linkage(X_scaled, method='ward')
dendrogram(linked)
plt.title("Dendrograma de clustering jer√°rquico")
plt.xlabel("Usuarios")
plt.ylabel("Distancia Euclidiana")
plt.show()

# Entrenar modelo K-Means con 5 clusters
kmeans = KMeans(n_clusters=5, random_state=42, n_init=10)
df['cluster'] = kmeans.fit_predict(X_scaled)

# Ver caracter√≠sticas promedio por cluster
cluster_means = df.groupby('cluster').mean()
print("\nValores promedio por cluster:")
print(cluster_means)



# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class="tocSkip"></a><br>
# 
# <b>Atenci√≥n</b> ‚ö†Ô∏è - Se ha implementado correctamente el clustering jer√°rquico y el modelo K-Means para segmentar clientes. Sin embargo, hay algunos aspectos que se pueden mejorar:
# 
# ### **Puntos positivos**:
# ‚úîÔ∏è **Uso adecuado del dendrograma** - Permite visualizar las relaciones entre los grupos y evaluar el n√∫mero √≥ptimo de clusters.  
# ‚úîÔ∏è **Estandarizaci√≥n de datos con `StandardScaler()`** - Es una buena pr√°ctica antes de aplicar K-Means para evitar que variables con diferentes escalas afecten la segmentaci√≥n.  
# ‚úîÔ∏è **Agrupaci√≥n y an√°lisis de clusters** - Se han calculado las medias de las caracter√≠sticas por cluster, lo que facilita la interpretaci√≥n de cada grupo.
# 
# ### **Puntos a mejorar**:
# 1Ô∏è‚É£ **Uso de `print()` para visualizar DataFrames** - No es la mejor pr√°ctica en Jupyter Notebooks o en an√°lisis de datos en general. Es mejor utilizar `display()` o `.head()` para una visualizaci√≥n m√°s clara y estructurada.  
#    **Sugerencia:**  
#    ```python
#    display(cluster_means)
#    ```
#    Esto presentar√° el DataFrame de una forma m√°s ordenada y f√°cil de leer.  
# 
# 2Ô∏è‚É£ **Evaluaci√≥n de la cantidad √≥ptima de clusters** - Aunque se estableci√≥ `n_clusters=5`, no se menciona por qu√© se eligi√≥ este valor.  
#    **Sugerencia:**  
#    - Usar el m√©todo del **codo (Elbow Method)** para confirmar si 5 es un n√∫mero adecuado.  
#    - Calcular el **√≠ndice de silueta (`silhouette_score`)** para evaluar la calidad de la segmentaci√≥n.
# 
# 
# 
# üìå **Resumen**: La segmentaci√≥n de clientes est√° bien aplicada, pero ser√≠a recomendable mejorar la visualizaci√≥n y evaluaci√≥n de los clusters para validar que el n√∫mero de segmentos es el adecuado. Tambi√©n es importante evitar `print()` en la visualizaci√≥n de DataFrames.  
# 
# </div>

# In[62]:


# Graficar distribuciones de algunas caracter√≠sticas clave
plt.figure(figsize=(12, 6))
for feature in ['Avg_class_frequency_total', 'Lifetime', 'Age']:
    sns.boxplot(x=df['cluster'], y=df[feature])
    plt.title(f"Distribuci√≥n de {feature} por cluster")
    plt.show()



# Cluster 2 parece ser el m√°s estable, con contratos de larga duraci√≥n y una tasa de abandono muy baja.
# Cluster 3 tiene la tasa de abandono m√°s alta, lo que podr√≠a indicar la necesidad de estrategias espec√≠ficas para retener a estos clientes.
# Cluster 1 tiene una baja tasa de abandono y caracter√≠sticas distintivas como bajo uso de promociones de amigos y pocos con pareja.
# Cluster 0 y Cluster 4 tienen tasas de abandono moderadas y caracter√≠sticas mixtas.

# In[63]:


# Calcular tasa de cancelaci√≥n por cluster
churn_rates = df.groupby('cluster')['Churn'].mean()
print("\nTasa de cancelaci√≥n por cluster:")
print(churn_rates)



# Cluster 2 es el m√°s estable y leal, con una tasa de cancelaci√≥n muy baja.
# Cluster 3 requiere atenci√≥n inmediata debido a su alta tasa de cancelaci√≥n.
# Clusters 0 y 4 tienen tasas de cancelaci√≥n moderadas y podr√≠an beneficiarse de estrategias de retenci√≥n adicionales.
# Cluster 1 es el m√°s estable y podr√≠a servir como un modelo para entender qu√© caracter√≠sticas contribuyen a la lealtad del cliente.

# In[64]:


# Visualizar la distribuci√≥n de clusters
sns.countplot(x=df['cluster'])
plt.title("Distribuci√≥n de clientes por cluster")
plt.show()


# Clusters 0 y 4: Tienen un n√∫mero significativo de clientes y tasas de cancelaci√≥n moderadas. Es importante implementar estrategias de retenci√≥n para estos grupos.
# Cluster 1: Aunque puede ser m√°s peque√±o, su baja tasa de cancelaci√≥n lo hace valioso. Las estrategias deber√≠an enfocarse en mantener su lealtad.
# Cluster 2: Aunque peque√±o, es muy estable y leal. Podr√≠a ser un grupo objetivo para programas de fidelizaci√≥n y referidos.
# Cluster 3: Este cluster es cr√≠tico debido a su alta tasa de cancelaci√≥n y posiblemente su tama√±o. Requiere atenci√≥n inmediata y estrategias espec√≠ficas para reducir el abandono.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a><br>
# 
# ‚úÖ **An√°lisis bien hecho.** Has identificado qu√© segmentos de clientes son m√°s leales y cu√°les requieren estrategias de retenci√≥n.  
# 
# üìå **Sugerencia**:  
# 1Ô∏è‚É£ Complementar este an√°lisis con `boxplots` de caracter√≠sticas clave para visualizar diferencias entre clusters.  
# 2Ô∏è‚É£ Proponer estrategias espec√≠ficas para los clientes con mayor riesgo de cancelaci√≥n.  
# 
# </div>

# ## Recomendaciones de Marketing para la retenci√≥n de clientes y reducir la tasa de cancelaci√≥n
# 

# Segmentaci√≥n y Personalizaci√≥n:
# Principio: Adaptar las estrategias de marketing a las necesidades espec√≠ficas de cada grupo de clientes.
# Implementaci√≥n:
# Crear campa√±as de marketing personalizadas basadas en el comportamiento y preferencias de cada cluster.
# Ofrecer descuentos y promociones espec√≠ficas para clusters con alta tasa de cancelaci√≥n.
# 
# Comunicaci√≥n Proactiva:
# Principio: Mantener una comunicaci√≥n constante y relevante con los clientes.
# Implementaci√≥n:
# Enviar recordatorios y ofertas especiales a clientes que est√°n cerca del final de su contrato.
# Utilizar m√∫ltiples canales de comunicaci√≥n (email, SMS, app) seg√∫n las preferencias de los clientes.
# 
# Programas de Fidelizaci√≥n:
# Principio: Incentivar la lealtad a trav√©s de recompensas y beneficios exclusivos.
# Implementaci√≥n:
# Implementar programas de puntos o recompensas para clientes leales.
# Ofrecer beneficios adicionales, como acceso exclusivo a eventos o servicios premium.
# 
# Mejora Continua del Servicio:
# Principio: Mejorar continuamente la experiencia del cliente para aumentar la satisfacci√≥n y retenci√≥n.
# Implementaci√≥n:
# Realizar encuestas de satisfacci√≥n y feedback regularmente.
# Implementar mejoras basadas en el feedback recibido, como ajustes en los horarios o servicios adicionales.
# 

# <div class="alert alert-block alert-success">
# 
# **¬°Gran trabajo!** Tu an√°lisis es s√≥lido y bien estructurado. Has abordado todos los aspectos clave del churn y la retenci√≥n de clientes en el gimnasio.  
# 
# üîπ **Puntos fuertes**:  
# ‚úÖ An√°lisis exploratorio completo.  
# ‚úÖ Visualizaciones bien dise√±adas.  
# ‚úÖ Modelado predictivo con buena interpretaci√≥n.  
# ‚úÖ Uso correcto de clustering para segmentar clientes.  
# ‚úÖ Recomendaciones de negocio bien argumentadas.  
# 
# üöÄ **√Åreas de mejora**:  
# üìå Considerar m√°s modelos y optimizaci√≥n con `GridSearchCV`.  
# üìå Evaluar los clusters con `silhouette_score`.  
# 
# **¬°Sigue as√≠! Tu an√°lisis es de gran calidad y est√°s mejorando mucho. üöÄüí°**  
# 
# </div>

# In[ ]:




